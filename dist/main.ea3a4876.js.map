{"version":3,"sources":["js/ConnectFour.js","js/main.js"],"names":["ConnectFour","selector","gameOver","gameTie","playerTurn","cellOwners","lastMouseMove","updateTime","colourRed","colourRedDark","colourYellow","colourYellowDark","colourTie","colourTieDark","colourBlue","colourBlank","redWinText","yellowWinText","tieText","textFont","media","window","matchMedia","rows","columns","aspectRatio","connect","canvas","document","getElementById","ctx","getContext","width","scrollWidth","height","scrollHeight","cellWidth","cellHeight","radius","radiusOutline","initialise","addEventListener","click","bind","matches","mouseMove","mouseOut","addListener","mediaChange","resizeGame","rowsArray","i","j","push","event","cell","getCell","offsetX","offsetY","drawGrid","checkWin","winText","Date","now","drawCellOutline","windowWidth","innerWidth","windowHeight","innerHeight","removeEventListener","fillStyle","roundRect","x","y","beginPath","arc","Math","PI","fill","centerX","centerY","trunc","checkCell","column","row","horizonal","vertical","diagonalLeft","diagonalRight","tie","checkArray","array","redCounter","yellowCounter","length","size","font","lineJoin","lineWidth","strokeStyle","textAlign","textBaseline","offset","text","strokeText","fillText","stroke","moveTo","lineTo","quadraticCurveTo","closePath","console","log","connectFour"],"mappings":"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","file":"main.ea3a4876.js","sourceRoot":"..\\src","sourcesContent":["export class ConnectFour {\r\n\tconstructor(selector) {\r\n\t\t// Game variables\r\n\t\tthis.gameOver = false;\t\t\t\t// used to keep track if game is finished or not\r\n\t\tthis.gameTie = false;\t\t\t\t// used to keep track of a tie\r\n\t\tthis.playerTurn = 0;                // player 0 is red, player 1 is yellow\r\n\t\tthis.cellOwners = [];               // 2d array of who owns which cell. Columns then rows\r\n\t\tthis.lastMouseMove = 0;\t\t\t\t// timer used to keep track of refresh rate\r\n\t\tthis.updateTime = 60;               // how often mouseMovement can update in ms\r\n\r\n\t\t// Colours\r\n\t\tthis.colourRed = 'rgb(240, 41, 41)';\r\n\t\tthis.colourRedDark = 'rgb(220, 21, 21)';\r\n\t\tthis.colourYellow = 'rgb(240, 232, 10)';\r\n\t\tthis.colourYellowDark = 'rgb(220, 212, 0)';\r\n\t\tthis.colourTie = 'rgb(240, 240, 240)';\r\n\t\tthis.colourTieDark = 'rgb(220, 220, 220)';\r\n\t\tthis.colourBlue = 'rgb(44, 173, 242)';\r\n\t\tthis.colourBlank = 'rgb(255, 255, 255)';\r\n\r\n\t\t// Win text\r\n\t\tthis.redWinText = 'Red Wins!';\r\n\t\tthis.yellowWinText = 'Yellow Wins!';\r\n\t\tthis.tieText = 'Tie!';\r\n\t\tthis.textFont = 'dejavu sans mono';\r\n\r\n\t\t// Hover support query\r\n\t\tthis.media = window.matchMedia('(hover: hover)');\r\n\r\n\t\t// Drawing variables\r\n\t\tthis.rows = 6;\r\n\t\tthis.columns = 7;\r\n\t\tthis.aspectRatio = this.columns / this.rows;\r\n\t\tthis.connect = 4;                                       // number of pucks needed to algin to win\r\n\r\n\t\tthis.canvas = document.getElementById(selector);        // the canvas element\r\n\t\tthis.ctx = this.canvas.getContext('2d');                // the canvas context\r\n\r\n\t\tthis.width = this.canvas.scrollWidth;                   // setting the canvas elements width to a variable\r\n\t\tthis.height = this.canvas.scrollHeight;                 // setting the canvas elements height to a variable\r\n\t\tthis.canvas.width = this.width;                         // set internal canvas width to the same as the canvas element\r\n\t\tthis.canvas.height = this.height;                       // set internal canvas height to the same as the canvas element\r\n\r\n\t\tthis.cellWidth = this.width / this.columns;\r\n\t\tthis.cellHeight = this.height / this.rows;\r\n\t\tthis.radius = this.cellWidth / 2.6;                     // sets raius for full circle that scales with canvas\r\n\t\tthis.radiusOutline = this.cellWidth / 3.6;\t\t\t\t// sets radius for circle outline that scales with canvas\r\n\r\n\t\tthis.initialise();\t\t// runs everything needed for startup\r\n\r\n\t\t// Event listeners\r\n\t\tthis.canvas.addEventListener('click', this.click.bind(this));\r\n\t\t// only add hover affect if device has support\r\n\t\tif (this.media.matches) {\r\n\t\t\tthis.canvas.addEventListener('mousemove', this.mouseMove.bind(this));\r\n\t\t\tthis.canvas.addEventListener('mouseout', this.mouseOut.bind(this), false);\r\n\t\t}\r\n\t\tthis.media.addListener(this.mediaChange.bind(this));\r\n\t\twindow.addEventListener('resize', this.resizeGame.bind(this), false);\r\n\t\twindow.addEventListener('orientationchange', this.resizeGame.bind(this), false);\r\n\t}\r\n\r\n\tinitialise() {\r\n\t\t// set all cell owners to null\r\n\t\tthis.cellOwners = []\r\n\t\tlet rowsArray = [];\r\n\t\tfor (let i = 0; i < this.columns; i++) {\r\n\t\t\tfor (let j = 0; j < this.rows; j++) {\r\n\t\t\t\trowsArray.push(null);\r\n\t\t\t}\r\n\t\t\tthis.cellOwners.push(rowsArray);\r\n\t\t\trowsArray = [];\r\n\t\t}\r\n\r\n\t\t// reset game controls\r\n\t\tthis.gameOver = false;\r\n\t\tthis.playerTurn = 0;\r\n\t\tthis.gameTie = false;\r\n\r\n\t\t// draw the game\r\n\t\tthis.resizeGame();\r\n\t}\r\n\r\n\tclick(event) {\r\n\t\t// check if the game is over\r\n\t\tif (this.gameOver == true) {\r\n\t\t\t// if game is over, reset the game\r\n\t\t\tthis.initialise();\r\n\t\t} else {\r\n\t\t\t// find the next available cell in the column\r\n\t\t\tlet cell = this.getCell(event.offsetX, event.offsetY);\r\n\r\n\t\t\t// check if the column is full\r\n\t\t\tif (cell[1] == -1) {\r\n\t\t\t\t// if column is full don't do anything\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\t// add cell to player owner\r\n\t\t\t\tthis.cellOwners[cell[0]][cell[1]] = this.playerTurn;\r\n\r\n\t\t\t\t// draw a new grid with new player owned puck\r\n\t\t\t\tthis.drawGrid();\r\n\r\n\t\t\t\t// check for win\r\n\t\t\t\tswitch (this.checkWin(cell[0], cell[1])) {\r\n\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t// winner\r\n\t\t\t\t\t\tthis.gameOver = true;\r\n\t\t\t\t\t\tthis.winText();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'tie':\r\n\t\t\t\t\t\t// tie\r\n\t\t\t\t\t\tthis.gameOver = true;\r\n\t\t\t\t\t\tthis.winText();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// toggle player turn\r\n\t\t\t\t\t\tthis.playerTurn ^= 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tmouseMove(event) {\r\n\t\t// limit mouseMove updates to 'updateTime' and only if the game is still in play\r\n\t\tif ((Date.now() - this.lastMouseMove > this.updateTime) && !this.gameOver) {\r\n\t\t\t// find the next available cell in the column\r\n\t\t\tlet cell = this.getCell(event.offsetX, event.offsetY);\r\n\r\n\t\t\t// check if the column is full\r\n\t\t\tif (cell[1] == -1) {\r\n\t\t\t\t// if column is full redraw grid to remove other cell highlight\r\n\t\t\t\tthis.drawGrid();\r\n\t\t\t} else {\r\n\t\t\t\t// redraw grid and then add highlighted cell\r\n\t\t\t\tthis.drawGrid();\r\n\t\t\t\tthis.drawCellOutline(cell);\r\n\t\t\t}\r\n\r\n\t\t\t// reset last mouse move\r\n\t\t\tthis.lastMouseMove = Date.now();\r\n\t\t}\r\n\t}\r\n\r\n\tmouseOut() {\r\n\t\t// check if game is still in play\r\n\t\tif (!this.gameOver) {\r\n\t\t\t// redraw grid to remove highlighted cell if mouse moves out of canvas\r\n\t\t\tthis.drawGrid();\r\n\t\t}\r\n\t}\r\n\r\n\tresizeGame() {\r\n\t\tlet windowWidth = window.innerWidth;\r\n\t\tlet windowHeight = window.innerHeight;\r\n\t\tlet windowAspectRatio = windowWidth / windowHeight;\r\n\r\n\t\t// check if the device is in portrain or landscape\r\n\t\tif (windowAspectRatio > this.aspectRatio) {\r\n\t\t\t// portrait\r\n\t\t\tthis.canvas.height = windowHeight;\r\n\t\t\tthis.canvas.width = this.aspectRatio * windowHeight;\r\n\r\n\t\t} else {\r\n\t\t\t// landscape\r\n\t\t\tthis.canvas.width = windowWidth;\r\n\t\t\tthis.canvas.height = windowWidth / this.aspectRatio;\r\n\t\t}\r\n\r\n\t\t// reset all drawing variables\r\n\t\tthis.width = this.canvas.scrollWidth;\r\n\t\tthis.height = this.canvas.scrollHeight;\r\n\t\tthis.canvas.width = this.width;\r\n\t\tthis.canvas.height = this.height;\r\n\r\n\t\tthis.cellWidth = this.width / this.columns;\r\n\t\tthis.cellHeight = this.height / this.rows;\r\n\t\tthis.radius = this.cellWidth / 2.6;\r\n\t\tthis.radiusOutline = this.cellWidth / 3.6;\r\n\r\n\t\t// redraw canvas\r\n\t\tthis.drawGrid();\r\n\t}\r\n\r\n\tmediaChange() {\r\n\t\tif (this.media.matches) {\r\n\t\t\t// if hover is supported on device add hover functionality\r\n\t\t\tthis.canvas.addEventListener('mousemove', this.mouseMove.bind(this));\r\n\t\t\tthis.canvas.addEventListener(\"mouseout\", this.mouseOut.bind(this));\r\n\t\t} else {\r\n\t\t\t// if hover is not supported on device remove hover functionality\r\n\t\t\tthis.canvas.removeEventListener('mousemove', this.mouseMove.bind(this));\r\n\t\t\tthis.canvas.addEventListener(\"mouseout\", this.mouseOut.bind(this));\r\n\t\t}\r\n\t}\r\n\r\n\tdrawGrid() {\r\n\t\t// create blue rounded rectange\r\n\t\tthis.ctx.fillStyle = this.colourBlue;\r\n\t\tthis.roundRect(this.ctx, 0, 0, this.width, this.height, this.radius, true, false)\r\n\r\n\t\t// create grid of holes\r\n\t\tlet x = this.cellWidth / 2;                 // sets the initial x center position of the first hole\r\n\t\tlet y = this.cellHeight / 2;                // sets the initial y center position of the first hole\r\n\t\tfor (let i = 0; i < this.columns; i++) {\r\n\t\t\tfor (let j = 0; j < this.rows; j++) {\r\n\t\t\t\t// check who owns the cell\r\n\t\t\t\tif (this.cellOwners[i][j] == 0) {\r\n\t\t\t\t\t// if player 0 owns the cell make it red\r\n\t\t\t\t\tthis.ctx.fillStyle = this.colourRed;\r\n\t\t\t\t} else if (this.cellOwners[i][j] == 1) {\r\n\t\t\t\t\t// if player 1 owns the cell make it yellow\r\n\t\t\t\t\tthis.ctx.fillStyle = this.colourYellow;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if noone owns the cell make it white\r\n\t\t\t\t\tthis.ctx.fillStyle = this.colourBlank;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// draw the circle\r\n\t\t\t\tthis.ctx.beginPath();\r\n\t\t\t\tthis.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\r\n\t\t\t\tthis.ctx.fill();\r\n\r\n\t\t\t\t// increment the y position by a cell\r\n\t\t\t\ty = y + this.cellHeight;\r\n\t\t\t}\r\n\t\t\t// reset y position\r\n\t\t\ty = this.cellHeight / 2;\r\n\r\n\t\t\t// increment the x position by a cell\r\n\t\t\tx = x + this.cellWidth;\r\n\t\t}\r\n\t}\r\n\r\n\tdrawCellOutline(cell) {\r\n\t\tlet centerX = (cell[0] * this.cellWidth) + (this.cellWidth / 2);\r\n\t\tlet centerY = (cell[1] * this.cellHeight) + (this.cellHeight / 2);\r\n\r\n\t\t// get player colour\r\n\t\tif (this.playerTurn == 0) {\r\n\t\t\t// red player\r\n\t\t\tthis.ctx.fillStyle = this.colourRed;\r\n\t\t} else {\r\n\t\t\t// yellow player\r\n\t\t\tthis.ctx.fillStyle = this.colourYellow;\r\n\t\t}\r\n\r\n\t\t// draw player colour circle\r\n\t\tthis.ctx.beginPath();\r\n\t\tthis.ctx.arc(centerX, centerY, this.radius, 0, 2 * Math.PI);\r\n\t\tthis.ctx.fill();\r\n\r\n\t\t// fill the center with white to make outline\r\n\t\tthis.ctx.fillStyle = this.colourBlank;\r\n\t\tthis.ctx.beginPath();\r\n\t\tthis.ctx.arc(centerX, centerY, this.radiusOutline, 0, 2 * Math.PI);\r\n\t\tthis.ctx.fill();\r\n\t}\r\n\r\n\tcheckCell(x, y) {\r\n\t\tif (x == this.width) x--;       // handling edge case for when x = width\r\n\t\tif (y == this.height) y--;      // handling edge case for when y = height\r\n\t\treturn [Math.trunc(x / this.cellWidth), Math.trunc(y / this.cellHeight)];\r\n\t}\r\n\r\n\tgetCell(x, y) {\r\n\t\t// get cell from mouse click\r\n\t\tlet cell = this.checkCell(x, y);\r\n\r\n\t\t// find out which row is the bottom in the column and return that cell, -1 if full\r\n\t\tfor (let i = 0; i < this.rows; i++) {\r\n\t\t\tif (this.cellOwners[cell[0]][i] !== null) {\r\n\t\t\t\treturn [cell[0], i - 1];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [cell[0], this.rows - 1];\r\n\t}\r\n\r\n\tcheckWin(column, row) {\r\n\t\t// create arrays for all possible win direction of the cell\r\n\t\tlet horizonal = [], vertical = [], diagonalLeft = [], diagonalRight = [];\r\n\t\tlet tie = true;\r\n\t\t// populate with values arrays\r\n\t\tfor (let i = 0; i < this.columns; i++) {\r\n\t\t\tfor (let j = 0; j < this.rows; j++) {\r\n\t\t\t\t// horizontal\r\n\t\t\t\tif (j == row) {\r\n\t\t\t\t\thorizonal.push(this.cellOwners[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\t// vertical\r\n\t\t\t\tif (i == column) {\r\n\t\t\t\t\tvertical.push(this.cellOwners[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\t// diagonalRight (bottom left to top right)\r\n\t\t\t\tif (i + j == column + row) {\r\n\t\t\t\t\tdiagonalRight.push(this.cellOwners[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\t// diagonalLeft (top left to bottom right)\r\n\t\t\t\tif (i - j == column - row) {\r\n\t\t\t\t\tdiagonalLeft.push(this.cellOwners[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\t// check for tie\r\n\t\t\t\tif (this.cellOwners[i][j] == null) {\r\n\t\t\t\t\ttie = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (tie) {\r\n\t\t\tthis.gameTie = true;\r\n\t\t\treturn 'tie';\r\n\t\t} else {\r\n\t\t\treturn this.checkArray(horizonal) || this.checkArray(vertical) || this.checkArray(diagonalRight) || this.checkArray(diagonalLeft)\r\n\t\t}\r\n\t}\r\n\r\n\tcheckArray(array) {\r\n\t\tlet redCounter = 0;\r\n\t\tlet yellowCounter = 0;\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tswitch (array[i]) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t// red\r\n\t\t\t\t\tredCounter++;\r\n\t\t\t\t\tif (redCounter >= this.connect) return true;\r\n\t\t\t\t\tyellowCounter = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t// yellow\r\n\t\t\t\t\tyellowCounter++;\r\n\t\t\t\t\tif (yellowCounter >= this.connect) return true;\r\n\t\t\t\t\tredCounter = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tredCounter = 0;\r\n\t\t\t\t\tyellowCounter = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\twinText() {\r\n\t\t// set up text parameters\r\n\t\tlet size = this.cellHeight;\r\n\t\tthis.ctx.fillStyle = this.gameTie ? this.colourTie : this.playerTurn ? this.colourYellow : this.colourRed;\r\n\t\tthis.ctx.font = size + 'px ' + this.textFont;\r\n\t\tthis.ctx.lineJoin = 'round';\r\n\t\tthis.ctx.lineWidth = size / 10;\r\n\t\tthis.ctx.strokeStyle = this.gameTie ? this.colourTieDark : this.playerTurn ? this.colourYellowDark : this.colourRedDark;\r\n\t\tthis.ctx.textAlign = 'center';\r\n\t\tthis.ctx.textBaseline = 'middle';\r\n\r\n\t\t// draw the text\r\n\t\tlet offset = size * 0.55;\r\n\t\tlet text = this.gameTie ? this.tieText : this.playerTurn ? this.yellowWinText : this.redWinText;\r\n\r\n\t\tthis.ctx.strokeText(text, this.width / 2, this.height / 2);\r\n\t\tthis.ctx.fillText(text, this.width / 2, this.height / 2);\r\n\t}\r\n\r\n\troundRect(ctx, x, y, width, height, radius = 5, fill, stroke = true) {\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(x + radius, y);\r\n\t\tctx.lineTo(x + width - radius, y);\r\n\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n\t\tctx.lineTo(x + width, y + height - radius);\r\n\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n\t\tctx.lineTo(x + radius, y + height);\r\n\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n\t\tctx.lineTo(x, y + radius);\r\n\t\tctx.quadraticCurveTo(x, y, x + radius, y);\r\n\t\tctx.closePath();\r\n\t\tif (fill) {\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t\tif (stroke) {\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t}\r\n}","console.log('Kia Ora');\r\n\r\nimport '../css/style.scss';\r\nimport { ConnectFour } from './ConnectFour.js';\r\n\r\n\r\nconst connectFour = new ConnectFour('connect-four');\r\n\r\n"]}